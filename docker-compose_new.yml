version: '3.8'

services:
  traefik:
    image: traefik:v2.6
    ports:
      - "80:80"
      - "443:443"
    command:
      # Entrypoints configuration
      - --entrypoints.web.address=:80
      # Docker provider configuration
      #- --providers.docker=true
      # Makes sure that services have to explicitly direct Traefik to expose them
      - --providers.docker.exposedbydefault=false
      # Default docker network to use for connections to all containers
      - --providers.docker.network=traefik_public
      # Logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
      #- --log.level=info

      - --providers.docker.swarmmode=true
      - --log.level=DEBUG
      - --accesslog
      #- --api.dashboard=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
    labels:
#      - traefik.http.routers.dashboard.rule=Host(`dash.done.ir`)
#      - traefik.http.routers.dashboard.service=dash_service
#      - "traefik.http.middlewares.auth.basicauth.users=admin.$apr1$XPnPawes$L79xVFce3ahPZ8CyFS3Ht."
#      - traefik.http.routers.dashboard.middlewares=auth
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_public"
      - "traefik.http.routers.api.rule=Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth" #Auth is only setup on the router using the web entrypoint

        ## Middlewares
        ##- "traefik.http.middlewares.auth.basicauth.users=alpha:$$1$$SEjVHN0z$$Apa3.iHJAW2dbAi6OuwDe/"
        ### host header
        #- "traefik.http.middlewares.hosthdr.headers.stsseconds=31536000"
        #- "traefik.http.middlewares.hosthdr.headers.stsincludesubdomains=true"
        #- "traefik.http.middlewares.hosthdr.headers.stspreload=true"

        # global redirect http to https
        #- "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
        #- "traefik.http.routers.http-catchall.entrypoints=web"
        #- "traefik.http.routers.http-catchall.middlewares=httpsalways"

        # middleware redirect http to https
        #- "traefik.http.middlewares.httpsalways.redirectscheme.scheme=https"
        #- "traefik.http.middlewares.httpsalways.redirectscheme.permanent=true"
        #- "traefik.http.middlewares.httpsalways.redirectscheme.port=443"

          #- "traefik.http.middlewares.httptohttps.redirectregex.regex=^https?://(?:www\.)?(.+)"
          #- "traefik.http.middlewares.httptohttps.redirectregex.replacement=https://$${1}"
          #- "traefik.http.middlewares.httptohttps.redirectregex.permanent=true"

        # enable https for api/dashboard
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.domains[0].main=traefik.example.com"
        # dummy port
      - "traefik.http.services.dummyservice.loadbalancer.server.port=1111" # In swarm mode, traefik requires a dummy Port
    networks:
      - traefik_public

  # https://github.com/traefik/whoami
  whoami:
    image: traefik/whoami:v1.7.1
    labels:
      # Explicitly instruct Traefik to expose this service
      - traefik.enable=true
      # Router configuration
      ## Listen to the `web` entrypoint
      - traefik.http.routers.whoami_route.entrypoints=web
      ## Rule based on the Host of the request
      - traefik.http.routers.whoami_route.rule=Host(`whoami.karvounis.tutorial`)
      - traefik.http.routers.whoami_route.service=whoami_service
      # Service configuration
      ## 80 is the port that the whoami container is listening to
      - traefik.http.services.whoami_service.loadbalancer.server.port=80
    networks:
      - traefik_public

networks:
  traefik_public:
    external: true
